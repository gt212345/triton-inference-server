
#
# Multistage build.
#
ARG TRITON_VERSION=2.29.0
ARG TRITON_CONTAINER_VERSION=22.12

FROM nvcr.io/nvidia/tritonserver:22.12-py3 AS full

FROM nvcr.io/nvidia/tritonserver:22.12-py3-min AS min_container


FROM ubuntu:20.04

ARG TRITON_VERSION
ARG TRITON_CONTAINER_VERSION

ENV TRITON_SERVER_VERSION ${TRITON_VERSION}
ENV NVIDIA_TRITON_SERVER_VERSION ${TRITON_CONTAINER_VERSION}
LABEL com.nvidia.tritonserver.version="${TRITON_SERVER_VERSION}"

ENV PATH /opt/tritonserver/bin:${PATH}

ENV LD_LIBRARY_PATH /opt/tritonserver/backends/onnxruntime:${LD_LIBRARY_PATH}

ENV TF_ADJUST_HUE_FUSED         1
ENV TF_ADJUST_SATURATION_FUSED  1
ENV TF_ENABLE_WINOGRAD_NONFUSED 1
ENV TF_AUTOTUNE_THRESHOLD       2
ENV TRITON_SERVER_GPU_ENABLED    0

# Create a user that can be used to run triton as
# non-root. Make sure that this user to given ID 1000. All server
# artifacts copied below are assign to this user.
ENV TRITON_SERVER_USER=triton-server
RUN userdel tensorrt-server > /dev/null 2>&1 || true &&     if ! id -u $TRITON_SERVER_USER > /dev/null 2>&1 ; then         useradd $TRITON_SERVER_USER;     fi &&     [ `id -u $TRITON_SERVER_USER` -eq 1000 ] &&     [ `id -g $TRITON_SERVER_USER` -eq 1000 ]

# Ensure apt-get won't prompt for selecting options
ENV DEBIAN_FRONTEND=noninteractive

# Common dependencies. FIXME (can any of these be conditional? For
# example libcurl only needed for GCS?)
RUN apt-get update &&     apt-get install -y --no-install-recommends             software-properties-common             libb64-0d             libcurl4-openssl-dev             libre2-5             git             gperf             dirmngr             libgoogle-perftools-dev             libnuma-dev             curl             libgomp1 libgfortran5 &&     rm -rf /var/lib/apt/lists/*

# Set TCMALLOC_RELEASE_RATE for users setting LD_PRELOAD with tcmalloc
ENV TCMALLOC_RELEASE_RATE 200

RUN mkdir -p /usr/local/cuda/lib64/stubs
COPY --from=min_container /usr/local/cuda/lib64/stubs/libcusparse.so /usr/local/cuda/lib64/stubs/libcusparse.so.11
COPY --from=min_container /usr/local/cuda/lib64/stubs/libcusolver.so /usr/local/cuda/lib64/stubs/libcusolver.so.11
COPY --from=min_container /usr/local/cuda/lib64/stubs/libcurand.so /usr/local/cuda/lib64/stubs/libcurand.so.10
COPY --from=min_container /usr/local/cuda/lib64/stubs/libcufft.so /usr/local/cuda/lib64/stubs/libcufft.so.10
COPY --from=min_container /usr/local/cuda/lib64/stubs/libcublas.so /usr/local/cuda/lib64/stubs/libcublas.so.11
COPY --from=min_container /usr/local/cuda/lib64/stubs/libcublasLt.so /usr/local/cuda/lib64/stubs/libcublasLt.so.11

RUN mkdir -p /usr/local/cuda/targets/sbsa-linux/lib
COPY --from=min_container /usr/local/cuda-11.8/targets/sbsa-linux/lib/libcudart.so.11.0 /usr/local/cuda/targets/sbsa-linux/lib/.
COPY --from=min_container /usr/local/cuda-11.8/targets/sbsa-linux/lib/libcupti.so.11.8 /usr/local/cuda/targets/sbsa-linux/lib/.
COPY --from=min_container /usr/local/cuda-11.8/targets/sbsa-linux/lib/libnvToolsExt.so.1 /usr/local/cuda/targets/sbsa-linux/lib/.

COPY --from=min_container /usr/lib/aarch64-linux-gnu/libcudnn.so.8 /usr/lib/aarch64-linux-gnu/libcudnn.so.8

# patchelf is needed to add deps of libcublasLt.so.11 to libtorch_cuda.so
RUN apt-get update &&         apt-get install -y --no-install-recommends openmpi-bin patchelf

ENV LD_LIBRARY_PATH /usr/local/cuda/targets/sbsa-linux/lib:/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH}

COPY --from=min_container /usr/lib/aarch64-linux-gnu/libnccl.so.2 /usr/lib/aarch64-linux-gnu/libnccl.so.2

# python3, python3-pip and some pip installs required for the python backend
RUN apt-get update &&     apt-get install -y --no-install-recommends             python3 libarchive-dev             python3-pip             libpython3-dev &&     pip3 install --upgrade pip &&     pip3 install --upgrade wheel setuptools &&     pip3 install --upgrade numpy &&     rm -rf /var/lib/apt/lists/*

WORKDIR /opt/tritonserver
RUN rm -fr /opt/tritonserver/*
ENV NVIDIA_PRODUCT_NAME="Triton Server"
COPY docker/entrypoint.d/ /opt/nvidia/entrypoint.d/

COPY docker/cpu_only/ /opt/nvidia/
ENTRYPOINT ["/opt/nvidia/nvidia_entrypoint.sh"]

ENV NVIDIA_BUILD_ID 50109463
LABEL com.nvidia.build.id=50109463
LABEL com.nvidia.build.ref=1a651ccb23c8f4416b5540653b207154a531194d

WORKDIR /opt/tritonserver
COPY --chown=1000:1000 --from=full /opt/tritonserver/LICENSE .
COPY --chown=1000:1000 --from=full /opt/tritonserver/TRITON_VERSION .
COPY --chown=1000:1000 --from=full /opt/tritonserver/NVIDIA_Deep_Learning_Container_License.pdf .
COPY --chown=1000:1000 --from=full /opt/tritonserver/bin bin/
COPY --chown=1000:1000 --from=full /opt/tritonserver/lib lib/
COPY --chown=1000:1000 --from=full /opt/tritonserver/include include/
# Copying over backends 
COPY --chown=1000:1000 --from=full /opt/tritonserver/backends/identity /opt/tritonserver/backends/identity
COPY --chown=1000:1000 --from=full /opt/tritonserver/backends/repeat /opt/tritonserver/backends/repeat
COPY --chown=1000:1000 --from=full /opt/tritonserver/backends/ensemble /opt/tritonserver/backends/ensemble
COPY --chown=1000:1000 --from=full /opt/tritonserver/backends/square /opt/tritonserver/backends/square
COPY --chown=1000:1000 --from=full /opt/tritonserver/backends/onnxruntime /opt/tritonserver/backends/onnxruntime
COPY --chown=1000:1000 --from=full /opt/tritonserver/backends/python /opt/tritonserver/backends/python
COPY --chown=1000:1000 --from=full /opt/tritonserver/backends/pytorch /opt/tritonserver/backends/pytorch
COPY --chown=1000:1000 --from=full /opt/tritonserver/backends/tensorflow2 /opt/tritonserver/backends/tensorflow2
COPY --chown=1000:1000 --from=full /opt/tritonserver/backends/fil /opt/tritonserver/backends/fil
COPY --chown=1000:1000 --from=full /opt/tritonserver/backends/openvino /opt/tritonserver/backends/openvino

# Top-level /opt/tritonserver/backends not copied so need to explicitly set permissions here
RUN chown triton-server:triton-server /opt/tritonserver/backends
#  Copying over repoagents 
COPY --chown=1000:1000 --from=full /opt/tritonserver/repoagents/checksum /opt/tritonserver/repoagents/checksum

# Top-level /opt/tritonserver/repoagents not copied so need to explicitly set permissions here
RUN chown triton-server:triton-server /opt/tritonserver/repoagents

LABEL com.amazonaws.sagemaker.capabilities.accept-bind-to-port=true
COPY --chown=1000:1000 --from=full /usr/bin/serve /usr/bin/.
